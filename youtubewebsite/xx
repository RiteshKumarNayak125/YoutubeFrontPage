#include <stdio.h>
#include <stdlib.h>

// Structure for an item which stores profit and weight of Item
struct Item {
    int profit, weight;
};

// Comparison function to sort Item according to profit/weight ratio
static int cmp(const void *a, const void *b) {
    double r1 = (double)(((struct Item *)b)->profit) / (double)(((struct Item *)b)->weight);
    double r2 = (double)(((struct Item *)a)->profit) / (double)(((struct Item *)a)->weight);
    return r1 > r2 ? 1 : -1;
}

// Main greedy function to solve the problem
double fractionalKnapsack(int W, struct Item arr[], int N) {
    // Sorting Item on the basis of ratio
    qsort(arr, N, sizeof(arr[0]), cmp);

    double finalvalue = 0.0;

    // Looping through all items
    for (int i = 0; i < N; i++) {
        // If adding Item won't overflow, add it completely
        if (arr[i].weight <= W) {
            W -= arr[i].weight;
            finalvalue += arr[i].profit;
        }
        // If we can't add the current Item, add the fractional part of it
        else {
            finalvalue += arr[i].profit * ((double)W / (double)arr[i].weight);
            break;
        }
    }

    // Returning the final value
    return finalvalue;
}

// Driver code
int main() {
    int W = 50;
    struct Item arr[] = { {60, 10}, {100, 20}, {120, 30} };
    int N = sizeof(arr) / sizeof(arr[0]);

    // Function call
    printf("%f\n", fractionalKnapsack(W, arr, N));

    return 0;
}

